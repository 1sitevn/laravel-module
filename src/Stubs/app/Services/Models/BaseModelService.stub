<?php

namespace Modules\MODULE_TITLE\Services\Models;

use Modules\MODULE_TITLE\Contracts\Models\BaseModelInterface;


/**
 * Class BaseModelService
 * @package Modules\MODULE_TITLE\Services\Models
 */
abstract class BaseModelService implements BaseModelInterface
{

    /**
     * @var \Illuminate\Database\Eloquent\Model $model
     */
    protected $model;

    /**
     * Base constructor.
     * @throws \Illuminate\Contracts\Container\BindingResolutionException
     */
    public function __construct()
    {
        $this->model = app()->make($this->getModel());
    }

    /**
     * @return mixed
     */
    abstract public function getModel();

    /**
     * @param $query
     * @param array $bindings
     * @return mixed
     */
    public function select($query, $bindings = [])
    {
        return $this->model->select($query, $bindings, true);
    }

    /**
     * @param array $columns
     * @return mixed
     */
    public function first($columns = ['*'])
    {
        return $this->model->first($columns);
    }

    /**
     * @param array $columns
     * @return mixed
     */
    public function get($columns = ['*'])
    {
        return $this->model->get($columns);
    }

    /**
     * @return bool|mixed
     */
    public function exists()
    {
        return $this->model->exists();
    }

    /**
     * @return \Illuminate\Database\Eloquent\Model|mixed
     */
    public function refresh()
    {
        return $this->model->refresh();
    }

    /**
     * @return mixed
     */
    public function count()
    {
        return $this->model->count();
    }

    /**
     * @param array $attributes
     * @return mixed
     */
    public function create(array $attributes = [])
    {
        return $this->model->create($attributes);
    }

    /**
     * @param array $values
     * @return bool|mixed
     */
    public function update(array $values)
    {
        return $this->model->update($values);
    }

    /**
     * @return bool|mixed|null
     * @throws \Exception
     */
    public function delete()
    {
        return $this->model->delete();
    }

    /**
     * @param $column
     * @param null $operator
     * @param null $value
     * @param string $boolean
     * @return mixed
     */
    public function where($column, $operator = null, $value = null, $boolean = 'and')
    {
        return $this->model->where($column, $operator, $value, $boolean);
    }

    /**
     * @param $column
     * @param null $operator
     * @param null $value
     * @return mixed
     */
    public function orWhere($column, $operator = null, $value = null)
    {
        return $this->model->where($column, $operator, $value);
    }

    /**
     * @param $column
     * @param $values
     * @param string $boolean
     * @param bool $not
     * @return mixed
     */
    public function whereIn($column, $values, $boolean = 'and', $not = false)
    {
        return $this->model->whereIn($column, $values, $boolean, $not);
    }

    /**
     * @param $column
     * @param $values
     * @return mixed
     */
    public function orWhereIn($column, $values)
    {
        return $this->model->orWhereIn($column, $values);
    }

    /**
     * @param $column
     * @param $values
     * @param string $boolean
     * @return mixed
     */
    public function whereNotIn($column, $values, $boolean = 'and')
    {
        return $this->model->whereNotIn($column, $values, $boolean);
    }

    /**
     * @param $column
     * @param $values
     * @return mixed
     */
    public function orWhereNotIn($column, $values)
    {
        return $this->model->whereNotIn($column, $values);
    }

    /**
     * @param $column
     * @param string $boolean
     * @return mixed
     */
    public function whereNotNull($column, $boolean = 'and')
    {
        return $this->model->whereNotNull($column, $boolean);
    }

    /**
     * @param $column
     * @param string $direction
     * @return mixed
     */
    public function orderBy($column, $direction = 'asc')
    {
        return $this->model->orderBy($column, $direction);
    }

    /**
     * @param $relations
     * @return \Illuminate\Database\Eloquent\Builder|\Illuminate\Database\Eloquent\Model|mixed
     */
    public function with($relations)
    {
        return $this->model->with($relations);
    }

    /**
     * @param $value
     * @return mixed
     */
    public function limit($value)
    {
        return $this->model->limit($value);
    }

    /**
     * @param $value
     * @return mixed
     */
    public function offset($value)
    {
        return $this->model->offset($value);
    }

    /**
     * @param int $perPage
     * @param array $columns
     * @param string $pageName
     * @param null $page
     * @return mixed
     */
    public function paginate($perPage = 15, $columns = ['*'], $pageName = 'page', $page = null)
    {
        return $this->model->paginate($perPage, $columns, $pageName, $page);
    }


}
